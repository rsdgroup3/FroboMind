/* Auto-generated by genmsg_cpp for file /home/rsd/groovy_workspace/FroboMind-Fuerte/fmMsgs/msg/gpgga.msg */
#ifndef FMMSGS_MESSAGE_GPGGA_H
#define FMMSGS_MESSAGE_GPGGA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace fmMsgs
{
template <class ContainerAllocator>
struct gpgga_ {
  typedef gpgga_<ContainerAllocator> Type;

  gpgga_()
  : header()
  , time_recv()
  , time()
  , lat(0.0)
  , lon(0.0)
  , fix(0)
  , sat(0)
  , hdop(0.0)
  , alt(0.0)
  , geoid_height(0.0)
  {
  }

  gpgga_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , time_recv()
  , time(_alloc)
  , lat(0.0)
  , lon(0.0)
  , fix(0)
  , sat(0)
  , hdop(0.0)
  , alt(0.0)
  , geoid_height(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef ros::Time _time_recv_type;
  ros::Time time_recv;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _time_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  time;

  typedef double _lat_type;
  double lat;

  typedef double _lon_type;
  double lon;

  typedef uint8_t _fix_type;
  uint8_t fix;

  typedef uint8_t _sat_type;
  uint8_t sat;

  typedef double _hdop_type;
  double hdop;

  typedef double _alt_type;
  double alt;

  typedef double _geoid_height_type;
  double geoid_height;


  typedef boost::shared_ptr< ::fmMsgs::gpgga_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fmMsgs::gpgga_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct gpgga
typedef  ::fmMsgs::gpgga_<std::allocator<void> > gpgga;

typedef boost::shared_ptr< ::fmMsgs::gpgga> gpggaPtr;
typedef boost::shared_ptr< ::fmMsgs::gpgga const> gpggaConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::fmMsgs::gpgga_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::fmMsgs::gpgga_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace fmMsgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fmMsgs::gpgga_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fmMsgs::gpgga_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fmMsgs::gpgga_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b2bfa2894941d69e03814be58416157";
  }

  static const char* value(const  ::fmMsgs::gpgga_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b2bfa2894941d69ULL;
  static const uint64_t static_value2 = 0xe03814be58416157ULL;
};

template<class ContainerAllocator>
struct DataType< ::fmMsgs::gpgga_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fmMsgs/gpgga";
  }

  static const char* value(const  ::fmMsgs::gpgga_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fmMsgs::gpgga_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
time time_recv		# Data received time stamp \n\
string time		# [UTC] Retrieved from the GPS data\n\
float64 lat		# [-90;90 deg] WGS-84 latitude in decimal degrees\n\
float64 lon		# [-180;180 deg] WGS-84 longitude in decimal degrees\n\
uint8 fix		# GPS fix: 0=Invalid, 1=GPS, 2=DGPS,4=RTK fixed, 5=RTK float \n\
uint8 sat		# Number of satellites in view\n\
float64 hdop		# Horizontal Dilution Of Precision\n\
float64 alt		# [m] Altitude above mean sea level\n\
float64 geoid_height	# [m] Mean sea level height above the WGS-84 ellipsoid\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::fmMsgs::gpgga_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::fmMsgs::gpgga_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::fmMsgs::gpgga_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fmMsgs::gpgga_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.time_recv);
    stream.next(m.time);
    stream.next(m.lat);
    stream.next(m.lon);
    stream.next(m.fix);
    stream.next(m.sat);
    stream.next(m.hdop);
    stream.next(m.alt);
    stream.next(m.geoid_height);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct gpgga_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fmMsgs::gpgga_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::fmMsgs::gpgga_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_recv: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_recv);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.time);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "fix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fix);
    s << indent << "sat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sat);
    s << indent << "hdop: ";
    Printer<double>::stream(s, indent + "  ", v.hdop);
    s << indent << "alt: ";
    Printer<double>::stream(s, indent + "  ", v.alt);
    s << indent << "geoid_height: ";
    Printer<double>::stream(s, indent + "  ", v.geoid_height);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FMMSGS_MESSAGE_GPGGA_H

