"""autogenerated by genpy from fmMsgs/gps_state.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class gps_state(genpy.Message):
  _md5sum = "22268f04050ca5b6f1b6f07f9f578a34"
  _type = "fmMsgs/gps_state"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
time time_recv		# Data received time stamp 
string time		# [UTC] retrieved from the GPS data
float64 lat		# [-90;90 deg] WGS-84 latitude in decimal degrees
float64 lon		# [-180;180 deg] WGS-84 longitude in decimal degrees
uint8 utm_zone_num	# [1;60] UTM zone number
string utm_zone_let	# UTM letter C to X
float64 utm_n		# [m] Northing in current UTM zone
float64 utm_e		# [m] Easting in current UTM zone
float64 alt		# [m] Altitude above mean sea level
uint8 fix		# GPS fix: 0=Invalid, 1=GPS, 2=DGPS,4=RTK fixed, 5=RTK float 
uint8 sat		# Number of satellites in view
float64 hdop		# Horizontal Dilution Of Precision
float64 geoid_height	# [m] Mean sea level height above the WGS-84 ellipsoid

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','time_recv','time','lat','lon','utm_zone_num','utm_zone_let','utm_n','utm_e','alt','fix','sat','hdop','geoid_height']
  _slot_types = ['std_msgs/Header','time','string','float64','float64','uint8','string','float64','float64','float64','uint8','uint8','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_recv,time,lat,lon,utm_zone_num,utm_zone_let,utm_n,utm_e,alt,fix,sat,hdop,geoid_height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gps_state, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_recv is None:
        self.time_recv = genpy.Time()
      if self.time is None:
        self.time = ''
      if self.lat is None:
        self.lat = 0.
      if self.lon is None:
        self.lon = 0.
      if self.utm_zone_num is None:
        self.utm_zone_num = 0
      if self.utm_zone_let is None:
        self.utm_zone_let = ''
      if self.utm_n is None:
        self.utm_n = 0.
      if self.utm_e is None:
        self.utm_e = 0.
      if self.alt is None:
        self.alt = 0.
      if self.fix is None:
        self.fix = 0
      if self.sat is None:
        self.sat = 0
      if self.hdop is None:
        self.hdop = 0.
      if self.geoid_height is None:
        self.geoid_height = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.time_recv = genpy.Time()
      self.time = ''
      self.lat = 0.
      self.lon = 0.
      self.utm_zone_num = 0
      self.utm_zone_let = ''
      self.utm_n = 0.
      self.utm_e = 0.
      self.alt = 0.
      self.fix = 0
      self.sat = 0
      self.hdop = 0.
      self.geoid_height = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.time_recv.secs, _x.time_recv.nsecs))
      _x = self.time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2dB.pack(_x.lat, _x.lon, _x.utm_zone_num))
      _x = self.utm_zone_let
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d2B2d.pack(_x.utm_n, _x.utm_e, _x.alt, _x.fix, _x.sat, _x.hdop, _x.geoid_height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_recv is None:
        self.time_recv = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.time_recv.secs, _x.time_recv.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time = str[start:end].decode('utf-8')
      else:
        self.time = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.lat, _x.lon, _x.utm_zone_num,) = _struct_2dB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.utm_zone_let = str[start:end].decode('utf-8')
      else:
        self.utm_zone_let = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.utm_n, _x.utm_e, _x.alt, _x.fix, _x.sat, _x.hdop, _x.geoid_height,) = _struct_3d2B2d.unpack(str[start:end])
      self.time_recv.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.time_recv.secs, _x.time_recv.nsecs))
      _x = self.time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2dB.pack(_x.lat, _x.lon, _x.utm_zone_num))
      _x = self.utm_zone_let
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d2B2d.pack(_x.utm_n, _x.utm_e, _x.alt, _x.fix, _x.sat, _x.hdop, _x.geoid_height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_recv is None:
        self.time_recv = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.time_recv.secs, _x.time_recv.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time = str[start:end].decode('utf-8')
      else:
        self.time = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.lat, _x.lon, _x.utm_zone_num,) = _struct_2dB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.utm_zone_let = str[start:end].decode('utf-8')
      else:
        self.utm_zone_let = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.utm_n, _x.utm_e, _x.alt, _x.fix, _x.sat, _x.hdop, _x.geoid_height,) = _struct_3d2B2d.unpack(str[start:end])
      self.time_recv.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3d2B2d = struct.Struct("<3d2B2d")
_struct_2I = struct.Struct("<2I")
_struct_2dB = struct.Struct("<2dB")
